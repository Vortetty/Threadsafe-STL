#include <vector>
#include <iostream>

#ifndef THREADSAFE_VECTOR
#define THREADSAFE_VECTOR
namespace std {
    namespace threadsafe {
        template <typename T, typename _Alloc = std::allocator<T>>
        class safe_vector : public std::vector<T> {
        protected:
            typedef typename std::vector<T, _Alloc>::iterator iterator;
            typedef typename std::vector<T, _Alloc>::const_iterator const_iterator;

        private:
            mutable std::mutex mutex_;

        public:
            using vector<T>::vector;
            safe_vector() : std::vector<T>() {} // Empty
            safe_vector(size_t size, const _Alloc& alloc = _Alloc()) : std::vector<T>(size, alloc) {} // N default elements
            safe_vector(size_t size, const T& value, const _Alloc& alloc = _Alloc()) : std::vector<T>(size, value, alloc) {} // N of `value`
            safe_vector(const safe_vector& old) : std::vector<T>(old) {} // Copy
            safe_vector(safe_vector&& old) : std::vector<T>(old) {} // Move
            safe_vector(initializer_list<T> list, const _Alloc& alloc = _Alloc()) : std::vector<T>(list, alloc) {} // Initializer list

            [[nodiscard]] unsigned long size() const {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::size();
            }
            T operator[](std::size_t idx) { 
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::operator[](idx); 
            }
            safe_vector<T, _Alloc> operator=(const std::vector<T> &__x) { 
                std::lock_guard<std::mutex> lock(mutex_);
                return *(safe_vector<T, _Alloc>*) &vector<T>::operator=(__x); 
            }
            safe_vector<T, _Alloc> operator=(const safe_vector<T> &__x) { 
                std::lock_guard<std::mutex> lock(mutex_);
                return *(safe_vector<T, _Alloc>*) &vector<T>::operator=(__x); 
            }
            safe_vector<T, _Alloc> operator=(initializer_list<T> __l) { 
                std::lock_guard<std::mutex> lock(mutex_);
                return *(safe_vector<T, _Alloc>*) &vector<T>::operator=(__l); 
            }

            void pop_front() {
                std::lock_guard<std::mutex> lock(mutex_);
                vector<T>::pop_front();
            }
            void pop_back() {
                std::lock_guard<std::mutex> lock(mutex_);
                vector<T>::pop_back();
            }

            void push_front(const T &item) {
                std::lock_guard<std::mutex> lock(mutex_);
                vector<T>::push_front(item);
            }
            void push_back(const T &item) {
                std::lock_guard<std::mutex> lock(mutex_);
                vector<T>::push_back(item);
            }

            T& front() {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::front();
            }
            T& back() {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::back();
            }
            T& at(std::size_t n) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::at(n);
            }

            iterator insert(const_iterator &position, const T *val) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::insert(position, val);
            }
            iterator erase(const_iterator &position) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::erase(position);
            }
            iterator erase(const_iterator &from, const_iterator &to) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::erase(from, to);
            }
            iterator erase(iterator &position) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::erase(position);
            }
            iterator erase(iterator &from, iterator &to) {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::erase(from, to);
            }
            void clear(const_iterator &position) {
                std::lock_guard<std::mutex> lock(mutex_);
                vector<T>::clear();
            }

            iterator begin() {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::begin();
            }
            iterator end() {
                std::lock_guard<std::mutex> lock(mutex_);
                return vector<T>::end();
            }
        };
    }
}
#endif
